version: "3.8"

services:
  init-folders:
    image: alpine:latest
    container_name: init-folders
    # Run only once, then exit
    restart: "no"
    entrypoint: >
      sh -c "
        echo '[init] Creating host directoriesâ€¦';
        # Make sure all host paths exist under /host
        DIRS="
          ${SONARR_CONFIG}
          ${RADARR_CONFIG}
          ${PLEX_CONFIG}
          ${PLEX_TRANSCODE}
          ${QBITTORRENT_CONFIG}
          ${PROWLARR_CONFIG}
          ${NGINX_PROXY_MANAGER_DATA}
          ${NGINX_PROXY_MANAGER_CONFIG}
          ${NGINX_PROXY_MANAGER_LETSENCRYPT}
          ${PORTAINER_DATA}
          ${DOWNLOADS_DIR}
          ${MEDIA_MOUNT}
          ${RCLONE_CACHE}
        ";
        for d in $DIRS; do
          mkdir -p /host${d} && chown -R ${PUID}:${PGID} /host${d};
        done;
        echo '[init] Done.';
      "
    volumes:
      # Mount the entire host filesystem so we can mkdir/chown
      - /:/host:rw

  rclone:
    image: rclone/rclone:latest
    container_name: rclone
    restart: unless-stopped
    depends_on:
      - init-folders
    cap_add:
      - SYS_ADMIN
      - DAC_READ_SEARCH
    devices:
      - /dev/fuse
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - type: bind
        source: ${MEDIA_MOUNT}
        target: ${MEDIA_MOUNT}
        bind:
          propagation: rshared
      - type: bind
        source: ${RCLONE_CACHE}
        target: /cache
    command: >
      /bin/sh -c "
        if ! mountpoint -q ${MEDIA_MOUNT} && [ \"\$(ls -A ${MEDIA_MOUNT})\" ]; then
          echo '[rclone] Cleaning stale files in ${MEDIA_MOUNT}';
          rm -rf ${MEDIA_MOUNT}/*;
        fi;
        exec rclone mount ${RCLONE_REMOTE_NAME}:${RCLONE_REMOTE_PATH} ${MEDIA_MOUNT}
          --allow-other --dir-cache-time 72h --poll-interval 15s
          --vfs-cache-mode full --vfs-cache-max-size 50G --vfs-cache-max-age 24h
          --uid ${PUID} --gid ${PGID}
      "
    healthcheck:
      test: ["CMD-SHELL", "mountpoint -q ${MEDIA_MOUNT}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    depends_on:
      rclone:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - "8989:8989"
    volumes:
      - ${SONARR_CONFIG}:/config
      - ${MEDIA_MOUNT}/TV:/media/tv:rw
      - ${DOWNLOADS_DIR}:/downloads:rw

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    depends_on:
      rclone:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - "7878:7878"
    volumes:
      - ${RADARR_CONFIG}:/config
      - ${MEDIA_MOUNT}/Movies:/media/movies:rw
      - ${DOWNLOADS_DIR}:/downloads:rw

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    restart: unless-stopped
    depends_on:
      rclone:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - PLEX_CLAIM=${PLEX_CLAIM}
    volumes:
      - ${MEDIA_MOUNT}:/media:rslave
      - ${PLEX_CONFIG}:/config
      - ${PLEX_TRANSCODE}:/transcode

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    depends_on:
      rclone:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=${QBITTORRENT_WEBUI_PORT}
    ports:
      - "${QBITTORRENT_WEBUI_PORT}:${QBITTORRENT_WEBUI_PORT}"
      - "6881:6881"
      - "6881:6881/udp"
    volumes:
      - ${QBITTORRENT_CONFIG}:/config
      - ${DOWNLOADS_DIR}:/downloads:rw

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    depends_on:
      rclone:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - "9696:9696"
    volumes:
      - ${PROWLARR_CONFIG}:/config
      - ${DOWNLOADS_DIR}:/downloads:rw

  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx-proxy-manager
    restart: unless-stopped
    depends_on:
      rclone:
        condition: service_healthy
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - ${NGINX_PROXY_MANAGER_DATA}:/data
      - ${NGINX_PROXY_MANAGER_CONFIG}:/config
      - ${NGINX_PROXY_MANAGER_LETSENCRYPT}:/etc/letsencrypt

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PORTAINER_DATA}:/data

networks:
  default:
    name: media
