# docker-compose.yml
version: "3.8"

services:
  rclone:
    image: rclone/rclone:latest
    container_name: rclone
    cap_add:
      - SYS_ADMIN
      - DAC_READ_SEARCH
    devices:
      - /dev/fuse:/dev/fuse
    security_opt:
      - apparmor:unconfined
    restart: unless-stopped
    entrypoint: ["/bin/sh", "-c"]
    command: |
      # wipe stale files if mountpoint exists but not mounted
      if [ -d "${MEDIA_MOUNT}" ] && [ "$(ls -A "${MEDIA_MOUNT}")" ]; then
        echo "[rclone] Cleaning stale files in ${MEDIA_MOUNT}";
        rm -rf "${MEDIA_MOUNT}"/*;
      fi
      # exec the real mount
      exec rclone mount "${RCLONE_REMOTE_NAME}:${RCLONE_REMOTE_PATH}" "${MEDIA_MOUNT}" \
        --allow-other \
        --dir-cache-time 72h \
        --poll-interval 15s \
        --vfs-cache-mode full \
        --vfs-cache-max-size 100G \
        --vfs-cache-max-age 24h \
        --uid ${PUID} \
        --gid ${PGID} \
        --umask 002
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./rclone-config:/config/rclone
      - ${MEDIA_MOUNT}:${MEDIA_MOUNT}:rshared
      - ${RCLONE_CACHE}:/mnt/rclone_cache
    healthcheck:
      test: ["CMD-SHELL", "mountpoint -q ${MEDIA_MOUNT}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    depends_on:
      rclone:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - "8989:8989"
    volumes:
      - type: bind
        source: ${MEDIA_MOUNT}/TV
        target: /media/tv
        bind:
          propagation: rslave
      - ${SONARR_CONFIG}:/config
      - ${DOWNLOADS_DIR}:/downloads

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    depends_on:
      rclone:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - "7878:7878"
    volumes:
      - type: bind
        source: ${MEDIA_MOUNT}/Movies
        target: /media/movies
        bind:
          propagation: rslave
      - ${RADARR_CONFIG}:/config
      - ${DOWNLOADS_DIR}:/downloads

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: bridge
    restart: unless-stopped
    depends_on:
      rclone:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - PLEX_CLAIM=${PLEX_CLAIM}
    ports:
      - "32400:32400/tcp"
      - "32400:32400/udp"
      - "32469:32469/udp"
      - "32469:32469/tcp"
      - "5353:5353/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
    volumes:
      - type: bind
        source: ${MEDIA_MOUNT}
        target: /media
        bind:
          propagation: rslave
      - ${PLEX_CONFIG}:/config
      - ${PLEX_TRANSCODE}:/transcode

  qbittorrent:
    image: linuxserver/qbittorrent:4.5.5
    container_name: qbittorrent
    restart: unless-stopped
    depends_on:
      rclone:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=8080
      - WEBUI_USERNAME=${QBT_WEBUI_USER}
      - WEBUI_PASSWORD=${QBT_WEBUI_PASS}
    ports:
      - "8080:8080"
      - "6881:6881"
      - "6881:6881/udp"
    volumes:
      - ${QBITTORRENT_CONFIG}:/config
      - ${DOWNLOADS_DIR}:/downloads

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    depends_on:
      rclone:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - "9696:9696"
    volumes:
      - ${PROWLARR_CONFIG}:/config
      - ${DOWNLOADS_DIR}:/downloads

  nginx_proxy_manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginxproxymanager
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "81:81"
    volumes:
      - ${NGINX_PROXY_MANAGER_DATA}:/data
      - ${NGINX_PROXY_MANAGER_CONFIG}:/config
      - ${NGINX_PROXY_MANAGER_LETSENCRYPT}:/etc/letsencrypt

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PORTAINER_DATA}:/data

  autoconfig:
    image: alpine:latest
    container_name: autoconfig
    depends_on:
      - sonarr
      - radarr
      - qbittorrent
      - prowlarr
    volumes:
      - ./init:/init
      - ./.env:/.env:ro
    entrypoint: ["/bin/sh", "-c"]
    command: >
      apk add --no-cache bash curl jq && \
      chmod +x /init/auto-config.sh && \
      /init/auto-config.sh
    restart: "no"

networks:
  default:
    name: media
